#Design an algorithm that constructs a binary tree for which two given
#lists of n labels 0, 1, . . . , n âˆ’ 1 are generated by the inorder and postorder
#traversals of the tree. Your algorithm should also identify inputs for which
#the problem has no solution.



class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def build_tree(inorder, postorder):
    if not inorder or not postorder:
        return None

    # The last element in postorder is the root
    root = TreeNode(postorder.pop())
    # Find the index of the root in inorder
    inorder_index = inorder.index(root.val)

    # Recursively build the right subtree
    root.right = build_tree(inorder[inorder_index+1:], postorder)
    # Recursively build the left subtree
    root.left = build_tree(inorder[:inorder_index], postorder)

    return root




def print_tree(root, level=0, prefix="Root: "):
    if root is not None:
        print(" " * (level * 4) + prefix + str(root.val))
        if root.left is not None or root.right is not None:
            if root.left:
                print_tree(root.left, level + 1, "L--- ")
            else:
                print(" " * ((level + 1) * 4) + "L--- None")
            if root.right:
                print_tree(root.right, level + 1, "R--- ")
            else:
                print(" " * ((level + 1) * 4) + "R--- None")


def validate_input(inorder, postorder):
    # Check if the input lists are empty or have different lengths
    if not inorder or not postorder or len(inorder) != len(postorder):
        return False
    # Check if the input lists have the same set of elements
    return set(inorder) == set(postorder)


# Example usage:
inorder = [2, 1, 3]
postorder = [2, 3, 1]

if validate_input(inorder, postorder):
    tree = build_tree(inorder, postorder)
    print_tree(tree)
    print("Binary tree constructed successfully.")
else:
    print("No valid solution exists for the given inputs.")
    
   
   
   






